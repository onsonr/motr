// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file dwn/v1/genesis.proto (package dwn.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * GenesisState defines the module genesis state
 *
 * @generated from message dwn.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * Params defines all the parameters of the module.
   *
   * @generated from field: dwn.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * Params defines the set of module parameters.
 *
 * @generated from message dwn.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * Whitelisted Key Types
   *
   * @generated from field: map<string, dwn.v1.KeyInfo> allowed_public_keys = 1;
   */
  allowedPublicKeys: { [key: string]: KeyInfo } = {};

  /**
   * ConveyancePreference defines the conveyance preference
   *
   * @generated from field: string conveyance_preference = 2;
   */
  conveyancePreference = "";

  /**
   * AttestationFormats defines the attestation formats
   *
   * @generated from field: repeated string attestation_formats = 3;
   */
  attestationFormats: string[] = [];

  /**
   * @generated from field: dwn.v1.Schema schema = 4;
   */
  schema?: Schema;

  /**
   * @generated from field: repeated string allowed_operators = 5;
   */
  allowedOperators: string[] = [];

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "allowed_public_keys", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: KeyInfo} },
    { no: 2, name: "conveyance_preference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "attestation_formats", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "schema", kind: "message", T: Schema },
    { no: 5, name: "allowed_operators", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * Capability reprensents the available capabilities of a decentralized web node
 *
 * @generated from message dwn.v1.Capability
 */
export class Capability extends Message<Capability> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string parent = 2;
   */
  parent = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: repeated string resources = 4;
   */
  resources: string[] = [];

  constructor(data?: PartialMessage<Capability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.Capability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "resources", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Capability {
    return new Capability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Capability {
    return new Capability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Capability {
    return new Capability().fromJsonString(jsonString, options);
  }

  static equals(a: Capability | PlainMessage<Capability> | undefined, b: Capability | PlainMessage<Capability> | undefined): boolean {
    return proto3.util.equals(Capability, a, b);
  }
}

/**
 * KeyInfo defines information for accepted PubKey types
 *
 * @generated from message dwn.v1.KeyInfo
 */
export class KeyInfo extends Message<KeyInfo> {
  /**
   * @generated from field: string role = 1;
   */
  role = "";

  /**
   * e.g., "ES256", "EdDSA", "ES256K"
   *
   * @generated from field: string algorithm = 2;
   */
  algorithm = "";

  /**
   * e.g., "hex", "base64", "multibase"
   *
   * @generated from field: string encoding = 3;
   */
  encoding = "";

  /**
   * e.g., "P256", "P384", "P521", "X25519", "X448",
   *
   * @generated from field: string curve = 4;
   */
  curve = "";

  constructor(data?: PartialMessage<KeyInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.KeyInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "algorithm", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "encoding", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "curve", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeyInfo {
    return new KeyInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeyInfo {
    return new KeyInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeyInfo {
    return new KeyInfo().fromJsonString(jsonString, options);
  }

  static equals(a: KeyInfo | PlainMessage<KeyInfo> | undefined, b: KeyInfo | PlainMessage<KeyInfo> | undefined): boolean {
    return proto3.util.equals(KeyInfo, a, b);
  }
}

/**
 * Resource reprensents the available resources of a decentralized web node
 *
 * @generated from message dwn.v1.Resource
 */
export class Resource extends Message<Resource> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string template = 2;
   */
  template = "";

  constructor(data?: PartialMessage<Resource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.Resource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "template", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resource {
    return new Resource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJsonString(jsonString, options);
  }

  static equals(a: Resource | PlainMessage<Resource> | undefined, b: Resource | PlainMessage<Resource> | undefined): boolean {
    return proto3.util.equals(Resource, a, b);
  }
}

/**
 * Schema is the Database Model for Decentralized Web Nodes
 *
 * @generated from message dwn.v1.Schema
 */
export class Schema extends Message<Schema> {
  /**
   * @generated from field: int32 version = 1;
   */
  version = 0;

  /**
   * @generated from field: string account = 2;
   */
  account = "";

  /**
   * @generated from field: string asset = 3;
   */
  asset = "";

  /**
   * @generated from field: string chain = 4;
   */
  chain = "";

  /**
   * @generated from field: string credential = 5;
   */
  credential = "";

  /**
   * @generated from field: string did = 6;
   */
  did = "";

  /**
   * @generated from field: string jwk = 7;
   */
  jwk = "";

  /**
   * @generated from field: string grant = 8;
   */
  grant = "";

  /**
   * @generated from field: string keyshare = 9;
   */
  keyshare = "";

  /**
   * @generated from field: string profile = 10;
   */
  profile = "";

  constructor(data?: PartialMessage<Schema>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.Schema";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "credential", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "jwk", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "grant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "keyshare", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "profile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Schema {
    return new Schema().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Schema {
    return new Schema().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Schema {
    return new Schema().fromJsonString(jsonString, options);
  }

  static equals(a: Schema | PlainMessage<Schema> | undefined, b: Schema | PlainMessage<Schema> | undefined): boolean {
    return proto3.util.equals(Schema, a, b);
  }
}

